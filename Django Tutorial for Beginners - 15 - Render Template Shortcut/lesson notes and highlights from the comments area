Instead of loading then rendering to html the returning to the user,like we did in lesson 14, we are going to use a
shortcut to combine the loading and rendering.  Also instead of a simple http response, we will be returning, from the
function, 'render'.  'render' first uses 'request' as its first argument then the path to that pattern.
The last argument, is, what is it that the template  needs in order to work, which is the dictionary.
return render(request, music/index.html, context)

Render has a built in http response, which is generated from the code.  It takes the info from 'HttpResponse':
def detail(request, album_id):
    return HttpResponse("<h2>Detail for Album ID: %s. " % album_id)
and converts to a valid http response and sends it.




# **************** highlights from comments area*******************



Why he didn't use /music/index.html in the render function but instead used music/index.html .
Why that slash is not there, he has been using it in the past few videos.

as bucky said the render method searches in the templates folder inside the app and you can reference the template
either way as "./music/..." or "music/" all will point to same directory





hey can anyone tell what is context variable doing and why a dictionary is assigned to it.???

The context variable which contains all_albums is passed on to the HTML(index.html) file (there we use an 'if loop'
{% if all_albums %} in order to check if there are any albums present.






I still don't understand why all_album inside context is related to {{album.id}} and {{album.album_title}}
in music/index.html

because he passed it into the html file. so the HTML file knows this. via dictionary, 'all_album' is the link and
all_album is the data.. you can use. .{'ben790924' : all_album} as context and then HTML file will use the
variable ben790924. hope this cleared your doubt.




why is context used??
and how can i display a html page which doesn't require anything from a database??

Context is used when you have to send previous page info to the next loading page. So, in the case of a failed login
attempt, you might need to send a Boolean to let the loading page know you just failed logging in. There's plenty of
other reasons you would use Context, but that's just one example.
And you can use the template.render without context! Just type in the request as an argument without your context variables:
return HttpResponse(template.render(request))




For Django 11 you might have to modify the detail function in views.py in the Music app while getting the album via
id/pk from ```album = Album.objects.filter(id=album_id) TO album = Album.objects.filter(id=album_id).get()```






