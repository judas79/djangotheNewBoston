When applying the navigation bar to all the pages, we would have to copy paste all the CDN sources, in the index.html
page, to every single page, since the navigation page will be on all of them. This includes the background and the font
styling.  The number one rule in coding, is not to repeat the same code over and over.  So we will make a generic
template, in one location, for those navigation, background and styling components and then fill in the rest, on the
individual pages for the website.

First create base.html in the templates/music directory.  This will be our generic blueprint.  We copy/ paste the
following from index.html to base.html, withing the existing code that was created by pycharm while generating the
base html 5 document.  Notice the <title> has been renamed </title>.  The following includes both; everything between
<head> COPY PASTED CDN </head>  is the copy/paste area:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Roddy Homepage</title>
    <!--L28 Everything from L25 to L27, was copy/pasted here from index.html, to create this generic bluprint to be used on
    all of the pages of this site, for the navigation bar. -->
    <!--lesson 25 (L25) the following django 2.0 and up loads the path to the static files,
    then the files are added one at a time-->
    {% load static %}
    {% comment %}{% load staticfiles %} L25 this format prior to django v 2.0 {% endcomment %}

    <!-- L25 you can load the framework; bootstrap from a CDN, then use bootstrap-->
    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">-->
    <!-- L25 or download it, and link to it locally. L27 put bootstrap before other CDN links to overide B.straps defaults-->
    {% comment %}<!--<link rel="stylesheet" href="{% static 'music/bootstrap.min.css' %}")>-->{% endcomment %}
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">

    <!--lesson 26 L26 This external file source, is a font from Google:-->
    <link href="//fonts.googleapis.com/css?family=Satisfy" rel="stylesheet" type="text/css">
    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">

    <!--L25add the file that points to the 'static' directory then the sub folder /music and then add the files, manually-->
    <link rel='stylesheet' type='text/css' href='{% static 'music/style.css' %}'/>

    <!--L26This library file source is for jquery: v 1.12.0 used in lesson-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <!--L26 This library file source is for javascript for bootstrap: v 3.3.6 used in lesson-->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>

The navigation bar will also be on every page, so we  copy/pasted it in the <body>:

<body>
    <nav class='navbar navbar-inverse'>

    <!-- <div> tag defines a division or a section in an HTML document-->
    <div class='container-fluid'>

        <!-- Header L26-->
        <!-- L26 add a logo, with buttons added; a Header, or called in bootstrap, the bootstrap header-->
        <div class='navbar-header'>
            <!--L26 makes the objects in the toolbar, toggle, visible or invisible with the dropdown button,
            as to see them-->
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#topNavBar">
                <!--settings icon, the three small horizontal lines, appears when window is re-sized to small to display
                all the toolbar contents, for dropdown options'-->
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class='navbar-brand' href="{% url 'music:index' %}">Roddy Homepage</a>
        </div>

        <!-- Items
        L26 Make all our toolbar navigational items collapsible,
        L27 added id="topNavBar" to make all items in navigation bar collapsible-->
        <div class="collapse navbar-collapse" id="topNavBar">
            <!-- make a numbered unordered list using class navbar-nav -->
            <ul class="nav navbar-nav">
                <!-- list item 'Album -->
                <li class="">
                    <!-- associated link item to 'Album' -->
                    <a href="{% url 'music:index' %}">
                        <!-- cd glyph icon within 'Albums' -->
                        <span class="glyphicon glyphicon-cd" aria-hidden="true"></span>&nbsp; Albums
                    </a>
                </li>
                <li class="active">
                    <!-- associated link item to 'Songs' -->
                    <a href="#">
                        <!-- music glyph icon within 'Songs' -->
                        <span class="glyphicon glyphicon-music" aria-hidden="true"></span>&nbsp; Songs
                    </a>
                </li>
            </ul>

            <!--L27 This area is for the search button -->
            <form class="navbar-form navbar-left" role='search' method='get' action='#'>
                <!-- L27 search button areas stylle-->
                <div class="form-group">
                    <!-- L27 where the user enters text and stores the query-->
                    <input type="text"class="form-control" name="q" value="">
                </div>
                <!-- L27 the submit button for the search box with default colors -->
                <button type="submit" class="btn btn-default">Search</button>
            </form>
            <!-- L27 copied from above, changed to navbar-right -->
            <ul class="nav navbar-nav navbar-right">
                <li class="">
                    <!-- associated link item to  -->
                    <a href="#">
                        <!-- plus glyph icon within 'Add Album' -->
                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>&nbsp; Add Album
                    </a>
                </li>
                <li class="">
                    <!-- associated link item to  -->
                    <a href="#">
                        <!-- off glyph icon (log off), within 'Logout' -->
                        <span class="glyphicon glyphicon-off" aria-hidden="true"></span>&nbsp; Logout
                    </a>
                </li>

            </ul>
        </div>
    </div>
</nav>

To be able to add more code to the code above, in the <body> pages to come, we need to make a kind of variable to define
this in the base.html.  It can be named anything but it is a block:

{% block body %}

Block defines, that a block of code will come after this.  The name is 'body'.  What the code is may change but it will
be a block of it.  So, the block of code starts at {% block body %} and ends at {% endblock %}.
To end the block we write:
{% endblock %}
And this closes the tags:
</body>
</html>

In the index.html, in order to access the base.html 'navigation bar code', and the CDN files, we use 'extends' to
include those links and code, at the top of the file.  We also include the path to the base.html file:
{% extends 'music/base.html' %}

Next, to include the code in the body of the index.html, after we added the navigation code, above, we surround
the index.html code with the same block codes.  It must be the first code tag at the top of the page:

{% block body %}
    {% if all_albums %} <!-- if there are any albums then this will br True-->
        <h4>Here are all my Albums</h4>
        <ul>

            {% comment %} This was commented out in lesson 20 to update to a dynamic link
            {% for album in all_albums %}
                <li><a href="/music/{{ album.id }}/">{{ album.album_title }}</a></li>
            {% endfor %}
            {% endcomment %}
        <!-- endfor is used to end the for loop where you want it

        Added lesson 20 and 21 dynamic link in the for statement -->
            {% for album in all_albums %}
                <li><a href="{% url 'music:detail' album.id %}">{{ album.album_title }}</a></li>
            {% endfor %}

        <!-- endfor is used to end for statement -->
        </ul>

    {% else %}
        <h3>You don't have any Albums</h3>
    {% endif %}

<!--L28 ends the block -->
{% endblock %}

You can now copy paste these blocks to other html pages:
{% extends 'music/base.html' %}
{% block body %}
{% endblock %}

This, condensing of the navigation menu, to the base.html theme, will make code implementation, non-repetitive, and easier to
update or change, such as the site name; easy to manage.

Next we will make another 'block title' for the title, so it will change from the default, on different pages.  In the
index.html we modify the <title> like this:

    <title>{% block title %}Roddy Homepage{% endblock %}</title>

To import this to the details.html page we add this to the top of the file:

<!--L28 To include the base.html, with the navigation bar, template here -->
{% extends 'music/base.html' %}

<!--L28 change the title using block to overwrite the title instead of the default base.html title name-->
<title>{% block title %}Album Details{% endblock %}</title>
<!--L28 Link the following code, so it begins after the base.html navigation code and links, ends. -->
{% block body %}
<!DOCTYPE html>

<img src={{album.album_logo}}> <!-- first we add the class 'Album' in lower case, then copy paste the objects name, -->
                               <!-- the models.py logo attribute, in the django identifier, squiggly brackets.      -->
<h1>{{album.album_title}}</h1> <!-- album title, constructed in the same fashion as above                           -->
<h2>{{ album.artist }}</h2>    <!-- artist name constructed in the same fashion as above                            -->

<!-- lesson 23 to catch user errors -->
{% if error_message %}
    <p><strong>{{ error_message }}</strong></p>
{% endif %}

<!--Lesson 23 setup form selection list for favorite song-->
<form action="{% url 'music:favorite' album.id %}" method='post'>
    {% csrf_token %}
    {% for song in album.song_set.all %}
        <input type="radio" id="song{{ forloop.counter }}" name= 'song' value='{{song.id}}'/>
        <!--create the label to display the song names-->
        <label for="song{{ forloop.counter }}">
            {{ song.song_title }}
            <!-- add the star at the end of the song name when the user selects that particular song-->
            {% if song.is_favorite %}
                <img src='http://i.imgur.com/b9b13Rd.png' />
            {% endif %}
        </label><br>  <!--# break, so each song appears on a new line-->
    {% endfor %}
    <!--create a submit button, the value= is the displayed text on the button-->
    <input type='submit' value='submit favorite'/>
</form>

<!--L28 end of block -->
{% endblock %}




*************** highlights from the comments area **************




Don't repeat yourself
https://en.wikipedia.org/wiki/Don%27t_repeat_yourself
I really enjoy your vids, Bucky. Thanks




If you are getting the error:
'static'. Did you forget to register or load this tag?
Just go the base.html file and add this to the top:
{% load staticfiles %}




great tutorial. one question: why is the base template in the music sub directory? should it not be in the website
directory so that every app can use it?

cause he has only one application, so he is using it as an example. don't forget also we have to configure the url of
our template too. so i thing he did that for speeding thing and show us the most import things which is the basic common
template. if you want to change this, as you said you can create a templates folder outside the music applications and
start to design your one templates .
